{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","element","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACxB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAACR,GAErB,OADAS,QAAQC,IAAIV,GAER,qBAAKC,UAAY,YAAjB,SACID,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACtB,cAAC,EAAD,CAAyBA,QAAWA,GAAvBA,EAAQC,WCLxBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,uBACCd,UAAY,SACZe,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC8CFG,G,wDAhDb,aAAc,IAAD,8BAEX,gBAmBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAQG,OAAOC,SAlB3C,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IANJ,E,qDAeb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAO1C,WAAS,IAAD,EAE0BC,KAAKN,MAA9Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACXU,EAAoBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC/CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAElD,OAEE,sBAAKhC,UAAU,MAAf,UACG,kDACA,cAAC,EAAD,CACAa,YAAc,iBACdC,aAAgBe,KAAKf,eACtB,cAAC,EAAD,CAAUJ,SAAYoB,W,GAxCZI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.cf654249.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className = 'card-container'>\r\n        <img alt = 'monster' src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n    \r\n)","import React from 'react';\r\nimport {Card} from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = (props) => {\r\n    console.log(props);\r\n    return(\r\n        <div className = 'card-list'>{\r\n            props.monsters.map(monster => (\r\n                <Card key = {monster.id} monster = {monster}/>\r\n      \r\n                ))\r\n        }\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n     className = 'search'\r\n     type = 'search'\r\n     placeholder = {placeholder}\r\n     onChange = {handleChange}/>\r\n)","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n      \n    \n    };\n\n    \n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = element => {\n    this.setState({searchField: element.target.value});\n  }\n\n  render(){\n\n    const {monsters, searchField} = this.state;\n    const filterredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return(\n\n      <div className=\"App\">\n         <h1>Monsters Rolodex</h1>\n         <SearchBox \n         placeholder = 'Search Monster'\n         handleChange = {this.handleChange} />\n        <CardList monsters = {filterredMonsters} />\n        \n    </div>\n\n    );\n\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}